package com.example.employee_sytem.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Set;

/**
        * Entity class representing a department in the system.
        * <p>
 * This class is mapped to the "departments" table in the database and defines the attributes
 * associated with a department, such as its name, description, and the employees in the department.
        * </p>
        */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "departments")
public class Department {

    /**
     * The unique identifier for the department.
     * This field is automatically generated by the database.
     * <p>
     * This is the primary key for the department entity.
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the department.
     * This field is stored in the "name" column in the database.
     * The department name must be unique and cannot be null.
     */
    @Column(name = "name", nullable = false, unique = true)
    private String name;

    /**
     * The description of the department.
     * This field provides additional information about the department.
     * It is optional and can be left null.
     */
    @Column(name = "description")
    private String description;

    /**
     * Constructor to initialize the department with id, name, and description.
     *
     * @param id the unique identifier for the department
     * @param name the name of the department
     * @param description the description of the department
     */
    public Department(Long id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    /**
     * Convenience method to get the full department information as a string.
     * This method concatenates the department name and description for easy representation.
     *
     * @return a string containing the department name and description
     */
    public String getFullDepartmentInfo() {
        return name + " - " + description;
    }

    /**
     * The set of employees associated with the department.
     * This is a One-to-Many relationship with the Employee entity.
     *
     * <p>
     * The "department" field in the "employees" table is the foreign key that references this department.
     * </p>
     *
     * <p>
     * This field is mapped using `mappedBy` to indicate the owning side of the relationship in the `Employee` entity.
     * </p>
     *
     * @see Employee
     */
    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Employee> employees;  // Optional: To establish the bidirectional relationship
}



