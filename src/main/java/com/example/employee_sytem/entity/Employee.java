package com.example.employee_sytem.entity;

import jakarta.persistence.*;
import lombok.*;

/**
 * Entity class representing an employee in the system.
 * <p>
 * This class is mapped to the "employees" table in the database and defines the attributes
 * associated with an employee.
 * </p>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "employees")
@Data
public class Employee {

    /**
     * The unique identifier for the employee.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The first name of the employee.
     * This field will be stored in the "first_name" column in the database.
     */
    @Column(name = "first_name")
    private String firstName;

    /**
     * The last name of the employee.
     * This field will be stored in the "last_name" column in the database.
     */
    @Column(name = "last_name")
    private String lastName;

    /**
     * The email address of the employee.
     * This field is stored in the "email_id" column, must be unique and cannot be null.
     */
    @Column(name = "email_id", nullable = false, unique = true)
    private String email;

    /**
     * The department that the employee belongs to.
     * This is a Many-to-One relationship with the Department entity.
     * The "department_id" column in the "employees" table is the foreign key.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id")
    private Department department;

    /**
     * The status of the employee (active or inactive).
     * The default value is false (inactive).
     */
    @Column(nullable = false)
    private boolean active =true;

    /**
     * The manager of the employee.
     * This is a self-referencing Many-to-One relationship where an employee can manage other employees.
     * The "manager_id" column in the "employees" table is the foreign key.
     */
    @ManyToOne
    @JoinColumn(name = "manager_id") // The foreign key in the employees table
    private Employee manager; // Assuming Employee can be a manager of other Employees

    /**
     * Constructor for creating a new Employee with the given id, first name, last name, and email.
     *
     * @param id the unique identifier for the employee
     * @param firstName the first name of the employee
     * @param lastName the last name of the employee
     * @param email the email address of the employee
     */
    public Employee(Long id, String firstName, String lastName, String email) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
    }

    /**
     * Convenience method to get the full name of the employee by concatenating their first and last names.
     *
     * @return the full name of the employee (firstName + " " + lastName)
     */
    public String getFullName() {
        return firstName + " " + lastName;
    }

}